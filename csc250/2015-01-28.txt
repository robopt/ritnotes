Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-01-28T13:00:38-05:00

====== 2015-01-28 ======
Created Wednesday 28 January 2015

* Why are you taking the course?
	* Understand how things work
* You will not be able to write assembly code which outperforms code generated by compilers
* Int Overflow
	* a*a >= 0?
		* Not for signed integers.
	* a+1 > a
		* No.
		* INT_MAX + 1 = INT_MIN
* Float
	* 1 bit - sign
	* n bits - mag
	* * 2 ^ exp
	* Never use ==
		* use a range
* Python
	* Auto promotion
		* run out of room for 32 bit -> 64 bit -> etc
* (a+b) + c == a + (b + c)
	* Yes for Integers. Not always mathematically correct.
	* No for Floats. Loss of Precision -> 1 = 0
* Languages
	* Assembly Language
		* add; r8,r0,4
			* add 4 to the data in register 0 and save it in register 8
		* Mapping every line of assembly to machine code (vice versa is true)
		* Attempt to make ML easier to works with. 
		* Sudo-Instruction
			* 1 line of assembly generates more than 1 line of machine code
		* add $8, $8,$4
			* add = opcode
			* $8, $8,$4 = operands
			* $ represents a register
	* ISA (Instruction Set Architecture)
		* Structuring the 1's and 0's in a way the processor understands
		* Like an API - You need to know the functions which are available
		* e.g. what OpCodes you can use and what their parameters are
		* Exposed from hardware so that the software can utilize it
	* Machine Language (ML)
		* Binary - just 1's and 0's
		* Hardware only understands this.
	* Hardware
